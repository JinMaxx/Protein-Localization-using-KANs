"""
Defines a centralized set of type aliases for the project's data structures,
primarily using `torchtyping` for shape-specific PyTorch Tensors.

It provides explicit types for tensors (encodings, labels, masks), data generators,
and PyTorch DataLoaders to improve code clarity and enable static type checking
of tensor dimensions throughout the codebase.
"""

import torch
from torch.utils.data import DataLoader
from typing_extensions import Tuple, Union, Generator, Callable, TypeAlias, List, Annotated

from source.data_scripts.read_data import SequenceData, SequenceEncodingData



# Defining explicit tensor shapes

# Encodings Tensors
Encoding_PerProtein_T: TypeAlias = Annotated[torch.Tensor, "EncodingDim"]  # [in_channels]
Encoding_PerResidue_T: TypeAlias = Annotated[torch.Tensor, "SeqLen", "EncodingDim"]  # [seq_len, in_channels]
Encoding_T: TypeAlias = Union[Encoding_PerProtein_T, Encoding_PerResidue_T]

# Embedding Tensors batched
Encodings_Batch_PerProtein_T: TypeAlias = Annotated[torch.Tensor, "Batch", "EncodingDim"] # [num_samples, in_channels]
Encodings_Batch_PerResidue_T: TypeAlias = Annotated[torch.Tensor, "Batch", "SeqLen", "EncodingDim"]  # [num_samples, seq_len, in_channels]
Encodings_Batch_Flattened_T: TypeAlias = Annotated[torch.Tensor, "Batch", "FlattenedDim"]
Encodings_Batch_T: TypeAlias = Union[Encodings_Batch_PerProtein_T, Encodings_Batch_PerResidue_T, Encodings_Batch_Flattened_T]

# Label
Label_T: TypeAlias = Annotated[torch.Tensor, "Scalar"]  # A single label. A scalar
Labels_Batch_T: TypeAlias = Annotated[torch.Tensor, "Batch"]  # 1D tensor of labels for classification

# Attention mask
AttentionMask_PerProtein_T: TypeAlias = Annotated[torch.Tensor, "Scalar"]  # A scalar mask
AttentionMask_PerResidue_T: TypeAlias = Annotated[torch.Tensor, "SeqLen"]  # [seq_len]
AttentionMask_T: TypeAlias = Union[AttentionMask_PerProtein_T, AttentionMask_PerResidue_T]

# Attention mask batched
AttentionMask_Batch_PerProtein_T: TypeAlias = Annotated[torch.Tensor, "Batch"]
AttentionMask_Batch_PerResidue_T: TypeAlias = Annotated[torch.Tensor, "Batch", "SeqLen"]
AttentionMask_Batch_Flattened_T: TypeAlias = Annotated[torch.Tensor, "Batch", "FlattenedDim"]
AttentionMask_Batch_T: TypeAlias = Union[AttentionMask_Batch_PerProtein_T, AttentionMask_Batch_PerResidue_T, AttentionMask_Batch_Flattened_T]

# Data (encoding, label, attention_mask)
Data_T: TypeAlias = Tuple[Encoding_T, Label_T, AttentionMask_T]
Data_Generator_T: TypeAlias = Generator[Data_T, None, None]

# Seq_Data Generators (used for streaming hdf5 entries)
Seq_Data_Generator_T: TypeAlias = Generator[SequenceData, None, None]
# Seq_Data_Generator_Supplier_T: TypeAlias = Callable[[], Seq_Data_Generator_T]
Sequence_Encoding_Data_Generator_T: TypeAlias = Generator[SequenceEncodingData, None, None]
Seq_Enc_Data_Generator_Supplier_T: TypeAlias = Callable[[], Sequence_Encoding_Data_Generator_T]


# DataLoader with specific typing
Data_Loader_T: TypeAlias = DataLoader[Tuple[Encodings_Batch_T, Labels_Batch_T, AttentionMask_Batch_T]]

Collate_Function_T: TypeAlias = Callable[[List[Data_T]], Tuple[Encodings_Batch_T, Labels_Batch_T, AttentionMask_Batch_T]]

# Model Outputs. Logits.
Logit_T: TypeAlias = Annotated[torch.Tensor, "NumClasses"]
Logits_Batch_T: TypeAlias = Annotated[torch.Tensor, "Batch", "NumClasses"]

# Probabilities of predictions
Prob_T: TypeAlias = Annotated[torch.Tensor, "NumClasses"]

# Loss
Loss_T: TypeAlias = float  # TensorType[(), float]
Batch_Losses_T: TypeAlias = Annotated[torch.Tensor, "BatchSize"]

# Data generated by model in Prediction Loop
Prediction_T: TypeAlias = Tuple[Label_T, Logit_T, Loss_T]

# Generator for calculating metrics (yielded from validation/test loop)
Prediction_Generator_T: TypeAlias = Generator[Prediction_T, None, None]